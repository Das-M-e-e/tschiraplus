using System.IdentityModel.Tokens.Jwt;
using Newtonsoft.Json;
using Services.DatabaseServices;
using Services.DTOs;

namespace Services.UserServices;

public class AuthService : IAuthService
{
    private readonly RemoteDatabaseService _remoteDb;
    private readonly TokenStorageService _tokenStorage;

    public AuthService(RemoteDatabaseService remoteDb)
    {
        _remoteDb = remoteDb;
        _tokenStorage = new TokenStorageService();
    }
    
    /// <summary>
    /// Registers a new user using the RemoteDatabaseService
    /// </summary>
    /// <param name="registerUserDto"></param>
    /// <returns>true or false</returns>
    public async Task<bool> RegisterAsync(RegisterUserDto registerUserDto)
    {
        var jsonContent = JsonConvert.SerializeObject(registerUserDto);
        
        return await _remoteDb.RegisterUserAsync(jsonContent);
    }

    /// <summary>
    /// Logs in an existing user using the RemoteDatabaseService
    /// </summary>
    /// <param name="loginUserDto"></param>
    /// <returns>The authentication token generated by the host as string</returns>
    /// <exception cref="Exception"></exception>
    public async Task<LoginResponse> LoginAsync(LoginUserDto loginUserDto)
    {
        var jsonContent = JsonConvert.SerializeObject(loginUserDto);
        var response = await _remoteDb.LoginUserAsync(jsonContent);

        if (!response.IsSuccessStatusCode) throw new Exception("Login failed.");
        
        Console.WriteLine("Login successful");
        
        var jsonResponse = await response.Content.ReadAsStringAsync();
        var loginResponse = JsonConvert.DeserializeObject<LoginResponse>(jsonResponse)!;

        SaveToken(loginResponse.Token);
        
        return new LoginResponse
        {
            Token = loginResponse.Token,
            User = new UserDto
            {
                UserId = loginResponse.User.UserId,
                Username = loginResponse.User.Username
            }
        };

    }

    /// <summary>
    /// Logs out an existing user
    /// </summary>
    /// <returns></returns>
    /// <exception cref="NotImplementedException"></exception>
    public Task LogoutAsync()
    {
        RemoveToken();
        return Task.CompletedTask;
    }
    
    /// <summary>
    /// Saves the authentication token to a file
    /// </summary>
    /// <param name="token"></param>
    public void SaveToken(string token)
    {
        _tokenStorage.SaveToken(token);
    }

    /// <summary>
    /// Loads the authentication token from a file
    /// </summary>
    /// <returns></returns>
    public string? LoadToken()
    {
        return _tokenStorage.LoadToken();
    }

    /// <summary>
    /// Removes the saved token
    /// </summary>
    private void RemoveToken()
    {
        _tokenStorage.RemoveToken();
    }

    /// <summary>
    /// Checks if a token is valid
    /// </summary>
    /// <param name="token"></param>
    /// <returns>true or false</returns>
    public bool IsTokenValid(string? token)
    {
        if (string.IsNullOrEmpty(token)) return false;

        try
        {
            var handler = new JwtSecurityTokenHandler();
            var jwt = handler.ReadJwtToken(token);

            return jwt.ValidTo > DateTime.UtcNow;
        }
        catch
        {
            return false;
        }
    }
}
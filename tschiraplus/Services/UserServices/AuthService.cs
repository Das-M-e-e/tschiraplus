using Newtonsoft.Json;
using Services.DatabaseServices;
using Services.DTOs;

namespace Services.UserServices;

public class AuthService : IAuthService
{
    private readonly RemoteDatabaseService _remoteDb;

    public AuthService(RemoteDatabaseService remoteDb)
    {
        _remoteDb = remoteDb;
    }
    
    /// <summary>
    /// Registers a new user using the RemoteDatabaseService
    /// </summary>
    /// <param name="registerUserDto"></param>
    /// <returns>true or false</returns>
    public async Task<bool> RegisterAsync(RegisterUserDto registerUserDto)
    {
        var jsonContent = JsonConvert.SerializeObject(registerUserDto);
        
        return await _remoteDb.RegisterUserAsync(jsonContent);
    }

    /// <summary>
    /// Logs in an existing user using the RemoteDatabaseService
    /// </summary>
    /// <param name="loginUserDto"></param>
    /// <returns>The authentication token generated by the host as string</returns>
    /// <exception cref="Exception"></exception>
    public async Task<string> LoginAsync(LoginUserDto loginUserDto)
    {
        var jsonContent = JsonConvert.SerializeObject(loginUserDto);
        var response = await _remoteDb.LoginUserAsync(jsonContent);

        if (!response.IsSuccessStatusCode) throw new Exception("Login failed.");
        
        var jsonResponse = await response.Content.ReadAsStringAsync();
        var token = JsonConvert.DeserializeObject<TokenResponse>(jsonResponse)!.Token;

        SaveToken(token);
        
        Console.WriteLine(token);

        return token;

    }

    /// <summary>
    /// Logs out an existing user
    /// </summary>
    /// <returns></returns>
    /// <exception cref="NotImplementedException"></exception>
    public Task LogoutAsync()
    {
        throw new NotImplementedException();
    }
    
    /// <summary>
    /// Saves the authentication token to a file
    /// </summary>
    /// <param name="token"></param>
    private static void SaveToken(string token)
    {
        File.WriteAllText("authToken.txt", token);
    }

    /// <summary>
    /// Loads the authentication token from a file
    /// </summary>
    /// <returns></returns>
    private static string? LoadToken()
    {
        return File.Exists("authToken.txt") ? File.ReadAllText("authToken.txt") : null;
    }

}